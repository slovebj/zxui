// scss-lint:disable QualifyingElement
// Make the div behave like a button
.btn-group,
.btn-group-v {
    position: relative;
    display: inline-block;
    vertical-align: middle; // match .btn alignment given font-size hack above
    >.btn {
        position: relative;
        float: left;
        // Bring the "active" button to the front
        &:focus,
        &:active,
        &.active,
        &:hover,
        {
            z-index: 2;
        }
    }
}

// Prevent double borders when buttons are next to each other
.btn-group {
    .btn:not(:first-child) {
        margin-left: -$input-btn-border-width;
    }
}

// Optional: Group multiple button groups together for a toolbar
.btn-toolbar {
    margin-left: -$btn-toolbar-margin; // Offset the first child's margin
    @include clearfix();
    .btn-group,
    .input-group {
        float: left;
    }
    >.btn,
    >.btn-group,
    >.input-group {
        margin-left: $btn-toolbar-margin;
    }
}

.btn-group>.btn:not(:first-child):not(:last-child) {
    border-radius: 0;
}

// Set corners individual because sometimes a single button can be in a .btn-group and we need :first-child and :last-child to both match
.btn-group>.btn:first-child:not(:last-child) {
    margin-left: 0;
    @include border-right-radius(0);
}

// Need .drop-toggle since :last-child doesn't apply given a .dropdown-menu immediately after it
.btn-group>.btn:last-child:not(:first-child),
.btn-group>.drop-toggle:not(:first-child) {
    @include border-left-radius(0);
}

// Custom edits for including btn-groups within btn-groups (useful for including dropdown buttons within a btn-group)
.btn-group>.btn-group {
    float: left;
}

.btn-group>.btn-group:not(:first-child):not(:last-child)>.btn {
    border-radius: 0;
}

.btn-group>.btn-group:first-child:not(:last-child) {
    >.btn:last-child,
    >.drop-toggle {
        @include border-right-radius(0);
    }
}

.btn-group>.btn-group:last-child:not(:first-child)>.btn:first-child {
    @include border-left-radius(0);
}

// On active and open, don't show outline
.btn-group .drop-toggle:active,
.btn-group.open .drop-toggle {
    outline: 0;
}

// Sizing
//
// Remix the default button sizing classes into new ones for easier manipulation.
.btn-group-sm>.btn {
    @extend .btn-sm;
}

.btn-group-lg>.btn {
    @extend .btn-lg;
}

//
// Split button dropdowns
//
// Give the line between buttons some depth
.btn-group>.btn+.drop-toggle {
    padding-right: $split-btn-dropdown-toggle-padding-x;
    padding-left: $split-btn-dropdown-toggle-padding-x;
}

.btn-group>.btn-lg+.drop-toggle {
    padding-right: $split-btn-lg-dropdown-toggle-padding-x;
    padding-left: $split-btn-lg-dropdown-toggle-padding-x;
}

// The clickable button for toggling the menu
// Remove the gradient and set the same inset shadow as the :active state
.btn-group.open .drop-toggle {
    @include box-shadow($btn-active-box-shadow);
    // Show no shadow for `.btn-link` since it has no other button styles.
    &.btn-link {
        @include box-shadow(none);
    }
}

//
// Vertical button groups
//
.btn-group-v {
    >.btn,
    >.btn-group,
    >.btn-group>.btn {
        display: block;
        float: none;
        width: 100%;
        max-width: 100%;
    }
    // Clear floats so dropdown menus can be properly placed
    >.btn-group {
        @include clearfix();
        >.btn {
            float: none;
        }
    }
    >.btn+.btn,
    >.btn+.btn-group,
    >.btn-group+.btn,
    >.btn-group+.btn-group {
        margin-top: -$input-btn-border-width;
        margin-left: 0;
    }
}

.btn-group-v>.btn {
    &:not(:first-child):not(:last-child) {
        border-radius: 0;
    }
    &:first-child:not(:last-child) {
        @include border-bottom-radius(0);
    }
    &:last-child:not(:first-child) {
        @include border-top-radius(0);
    }
}

.btn-group-v>.btn-group:not(:first-child):not(:last-child)>.btn {
    border-radius: 0;
}

.btn-group-v>.btn-group:first-child:not(:last-child) {
    >.btn:last-child,
    >.drop-toggle {
        @include border-bottom-radius(0);
    }
}

.btn-group-v>.btn-group:last-child:not(:first-child)>.btn:first-child {
    @include border-top-radius(0);
}

// Checkbox and radio options
//
// In order to support the browser's form validation feedback, powered by the
// `required` attribute, we have to "hide" the inputs via `clip`. We cannot use
// `display: none;` or `visibility: hidden;` as that also hides the popover.
// Simply visually hiding the inputs via `opacity` would leave them clickable in
// certain cases which is prevented by using `clip` and `pointer-events`.
// This way, we ensure a DOM element is visible to position the popover from.
//
// See https://github.com/twbs/bootstrap/pull/12794 and
// https://github.com/twbs/bootstrap/pull/14559 for more information.
[data-toggle="buttons"] {
    >.btn,
    >.btn-group>.btn {
        input[type="radio"],
        input[type="checkbox"] {
            position: absolute;
            clip: rect(0, 0, 0, 0);
            pointer-events: none;
        }
    }
}